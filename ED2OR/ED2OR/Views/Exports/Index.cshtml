@model ED2OR.ViewModels.ExportsViewModel

@{
    ViewBag.Title = "Exports";
}

<style>
    .accordionHeader {
        width:100%;
        text-align: left;
    }

    .table td {
        white-space:nowrap;
    }

    
</style>

<h3>Data Selection</h3>

@*http://v4-alpha.getbootstrap.com/components/collapse/*@

@using (Html.BeginForm())
{
    @*<div id="criteriaContainer">
        @Html.EditorFor(x => x.CriteriaSections)
        <input type="submit" value="OK" />
    </div>*@
    @Html.Partial("_CriteriaSection", Model.SchoolsCriteriaSection, new ViewDataDictionary()
        {
            TemplateInfo = new TemplateInfo()
            { HtmlFieldPrefix = "Schools" }
        })

    @Html.Partial("_CriteriaSection", Model.SchoolYearsCriteriaSection, new ViewDataDictionary()
        {
            TemplateInfo = new TemplateInfo()
            { HtmlFieldPrefix = "School_Years" }
        })

    @Html.Partial("_CriteriaSection", Model.TermsCriteriaSection, new ViewDataDictionary()
    {
        TemplateInfo = new TemplateInfo()
        { HtmlFieldPrefix = "Terms" }
    })

    <div id="SubjectsContainer">
        @Html.Partial("_CriteriaSection", Model.SubjectsCriteriaSection, new ViewDataDictionary()
            {
                TemplateInfo = new TemplateInfo()
                { HtmlFieldPrefix = "Subjects" }
            })
    </div>

    <div id="CoursesContainer">
        @Html.Partial("_CriteriaSection", Model.CoursesCriteriaSection, new ViewDataDictionary()
            {
                TemplateInfo = new TemplateInfo()
                { HtmlFieldPrefix = "Courses" }
            })
    </div>

    <div id="TeachersContainer">
        @Html.Partial("_CriteriaSection", Model.TeachersCriteriaSection, new ViewDataDictionary()
            {
                TemplateInfo = new TemplateInfo()
                { HtmlFieldPrefix = "Teachers" }
            })
    </div>

    <div id="SectionsContainer">
        @Html.Partial("_CriteriaSection", Model.SectionsCriteriaSection, new ViewDataDictionary()
            {
                TemplateInfo = new TemplateInfo()
                { HtmlFieldPrefix = "Sections" }
            })
    </div>

    <br />
    if (Model.DataPreviewSections != null)
    {
        <br />
        <h3>Data Preview</h3>

        foreach (var previewSection in Model.DataPreviewSections)
        {
            <div class="btn btn-primary accordionHeader" data-toggle="collapse" href="#preview_@previewSection.SectionName">
                @previewSection.SectionName
            </div>
            <div class="collapse" id="preview_@previewSection.SectionName">
                @*<div class="table-responsive">
                    or put table-responsive in table class*@
                <table id="table_@previewSection.SectionName" data-pagination="true" class="table table-striped table-bordered table-condensed">
                    <thead>
                        <tr>
                            @foreach (var col in previewSection.ColumnNames)
                            {
                                <th data-field="@col">@col</th>
                            }
                        </tr>
                    </thead>
                </table>
            </div>
        }
    }
        
    <br />
    <br />
    <button type="submit" class="btn btn-primary" id="btnPreview" name="Command" value="Preview">Preview Data</button>
    <button type="submit" class="btn btn-primary" id="btnDownload" name="Command" value="Download">Download CSV Package</button>
    <button type="submit" class="btn btn-primary" id="btnSaveTemplate" name="Command" value="SaveTemplate">Save Template</button> 
}



@section scripts{
        <script>
            function deselectAll(divId) {
                $("#" + divId).find("input:checkbox").removeAttr("checked");
                $("#numSelected_" + divId).text("(0 selected)");
                if (divId == "Schools" || parentDivId == "School_Years" || parentDivId == "Terms") {
                    topGroupChanged();
                }
                //checkboxRecount(divId);
            }

            function checkboxRecount(divId) {
                var numCheckedBoxes = $("#" + divId).find("input:checkbox:checked").length;
                var numTotalBoxes = $("#" + divId).find("input:checkbox").length;

                var txt = (numCheckedBoxes == numTotalBoxes && numTotalBoxes != 0) ? "(all selected)" : "(" + numCheckedBoxes + " selected)"
                $("#numSelected_" + divId).text(txt);
            }

            function getCheckedIds(divId) {
                var checkedBoxes = $("#" + divId).find("input:checkbox:checked");

                var arr = [];
                checkedBoxes.each(function () {
                    var $this = $(this);
                    arr.push($this.data('filterid'));
                });
                return arr;
            }

            function getBoxesAlreadyChecked(divId) {
                var checkedBoxes = $("#" + divId).find("input:checkbox:checked");

                var arr = [];
                checkedBoxes.each(function () {
                    var $this = $(this);
                    var labelText = $('label[for=' + $this.attr('id') + ']').html();
                    arr.push(labelText);
                });
                return arr;
            }

            //function redrawCheckboxes(divId, stringArray) {
            //    var existingCheckBoxes = $("#" + divId).find("input:checkbox");

            //    existingCheckBoxes.each(function () {
            //        var $this = $(this);
            //        var labelText = $('label[for=' + $this.attr('id') + ']').html();
            //        //var labelText = label.html();
            //        if ($.inArray(labelText, stringArray) == -1) {
            //            $this.closest("span").remove();
            //            //label.remove();
            //            //$this.remove();
            //        }
            //        else { //http://stackoverflow.com/questions/866239/creating-the-checkbox-dynamically-using-javascript
            //        }
            //    });
            //}

            function topGroupChanged() {
                var schoolIds = getCheckedIds("Schools");
                var schoolYears = getCheckedIds("School_Years");
                var terms = getCheckedIds("Terms");

                var subjectsAlreadyChecked = getBoxesAlreadyChecked("Subjects");
                var coursesAlreadyChecked = getBoxesAlreadyChecked("Courses");
                var teachersAlreadyChecked = getBoxesAlreadyChecked("Teachers");

                $("#SubjectsContainer").load("@Url.Action("GetSubjectsPartial")", { 
                    schoolIds: schoolIds,
                    schoolYears: schoolYears,
                    terms: terms,
                    boxesAlreadyChecked: subjectsAlreadyChecked });

                $("#CoursesContainer").load("@Url.Action("GetCoursesPartial")", { 
                    schoolIds: schoolIds,
                    schoolYears: schoolYears,
                    terms: terms,
                    boxesAlreadyChecked: coursesAlreadyChecked });

                $("#TeachersContainer").load("@Url.Action("GetTeachersPartial")", { 
                    schoolIds: schoolIds,
                    schoolYears: schoolYears,
                    terms: terms,
                    boxesAlreadyChecked: teachersAlreadyChecked });

                @*var postData = { schoolIds: schoolIds };
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("GetSubjectsCheckboxes")',
                    data: postData,
                    success: function (result) {
                        redrawCheckboxes("Subjects", result);
                    },
                    //error: function (err) {
                    //    alert('problem');
                    //},
                    dataType: "json",
                    traditional: true
                });*@
            }

            function checkboxChanged(that) {
                var parentDivId = $(that).parent("div").attr("id");
                if (parentDivId == "Schools" || parentDivId == "School_Years" || parentDivId == "Terms") {
                    topGroupChanged();
                }
                checkboxRecount(parentDivId);

                //if ($(this).is(':checked')) {
                //    console.log($(this).val() + ' is now checked');
                //} else {
                //    console.log($(this).val() + ' is now unchecked');
                //}
            }
        </script>

    @if (Model.DataPreviewSections != null)
    {
        <script>
            $(function () {
                var orgsData = @Html.Raw(Model.JsonPreviews.Orgs);
                $('#table_orgs').bootstrapTable({
                    data: orgsData
                });

                var usersData = @Html.Raw(Model.JsonPreviews.Users);
                $('#table_users').bootstrapTable({
                    data: usersData
                });

                var coursesData = @Html.Raw(Model.JsonPreviews.Courses);
                $('#table_courses').bootstrapTable({
                    data: coursesData
                });

                var classesData = @Html.Raw(Model.JsonPreviews.Classes);
                $('#table_classes').bootstrapTable({
                    data: classesData
                });

                var enrollmentsData = @Html.Raw(Model.JsonPreviews.Enrollments);
                $('#table_enrollments').bootstrapTable({
                    data: enrollmentsData
                });

                var academicsessions = @Html.Raw(Model.JsonPreviews.AcademicSessions);
                $('#table_academicsessions').bootstrapTable({
                    data: academicsessions
                });
            });
        </script>
    }

            

    }